#!/bin/sh
#
# fluentd
#
# chkconfig:   - 20 80
# description: A Fluentd log agent

### BEGIN INIT INFO
# Provides:          fluentd
# Required-Start:    $local_fs $network $remote_fs
# Required-Stop:     $local_fs $network $remote_fs
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: A FluentD agent
# Description:       A FluentD agent
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

scl="/opt/rh/rh-ruby22/enable"
dir="/opt/athena/fluentd"
exec="/opt/athena/fluentd/bin/fluentd"
prog="fluentd"
config="/etc/fluent/fluent.conf"
logfile="/var/log/$prog.log"

pidfile="/var/run/$prog.pid"
lockfile=/var/lock/subsys/$prog

export LD_PRELOAD="/usr/lib64/libjemalloc.so"

start() {
    [ -f $scl ] || exit 5
    [ -x $exec ] || exit 6
    [ -f $config ] || exit 7

    umask 077

    touch $logfile $pidfile

    cd $dir
    . $scl

    echo -n $"Starting $prog: "
    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        " { bundle exec $exec &>> $logfile & } ; echo \$! >| $pidfile "

    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    ## graceful shutdown with SIGINT
    killproc -p $pidfile $exec -INT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    echo
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
