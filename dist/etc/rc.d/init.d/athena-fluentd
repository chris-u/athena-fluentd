#!/bin/sh
#
# fluentd
#
# chkconfig:   - 20 80
# description: A Fluentd log agent

### BEGIN INIT INFO
# Provides:          fluentd
# Required-Start:    $local_fs $network $remote_fs
# Required-Stop:     $local_fs $network $remote_fs
# Default-Start:     3 4 5
# Default-Stop:      0 1 2 6
# Short-Description: A FluentD agent
# Description:       A FluentD agent
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

scl="/opt/rh/rh-ruby22/enable"
dir="/opt/athena/fluentd"
exec="/opt/athena/fluentd/bin/fluentd"
prog="athena-fluentd"
config="/etc/athena-fluentd/athena-fluentd.conf"
logfile="/var/log/athena-fluentd/$prog.log"

pidfile="/var/run/athena-fluentd/$prog.pid"
lockfile=/var/lock/subsys/$prog

export LD_PRELOAD="$(ls /usr/lib64/libjemalloc.so* | head -n 1)"

start() {
    [ -f $scl ] || {
        echo "Error: $scl not found, exiting."
        exit 5
    }
    [ -x $exec ] || {
        echo "Error: $exec not executable, exiting."
        exit 6
    }
    [ -f $config ] || {
        echo "Error: $config not found, exiting."
        exit 7
    }

    ulimit -n 65536 || {
        echo "Error: could not increase max open files limit to 65536."
        exit 8
    }

    umask 0022

    touch $logfile $pidfile

    cd $dir
    . $scl

    echo -n $"Starting $prog: "
    ## holy shell shenanigans, batman!
    ## daemon can't be backgrounded.  we need the pid of the spawned process,
    ## which is actually done via runuser thanks to --user.  you can't do "cmd
    ## &; action" but you can do "{cmd &}; action".
    daemon \
        --pidfile=$pidfile \
        " { bundle exec $exec -c $config --suppress-repeated-stacktrace -qq &>> $logfile & } ; printf \$! >| $pidfile "

    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $exec
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile $pidfile
    return $retval
}

force_stop() {
    pkill -9 -xf 'ruby /opt/athena/fluentd/bin/fluentd -c /etc/athena-fluentd/athena-fluentd.conf'
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile $pidfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $exec -HUP
    echo
}

flush() {
    echo -n $"Flushing buffer of $prog: "
    killproc -p $pidfile $exec -USR1
    echo
}

debug() {
    echo -n $"Gathering debug info for $prog: "
    killproc -p $pidfile $exec -CONT
    echo
    cat /tmp/sigdump-$(cat $pidfile).log
    rm -f /tmp/sigdump-$(cat $pidfile).log
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p "$pidfile" -l $prog $exec
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && {
            echo "$prog is already running."
            exit 0
        }
        $1
        ;;
    stop)
        rh_status_q || {
            echo "$prog is already stopped."
            exit 0
        }
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    flush)
        flush
        ;;
    debug)
        debug
        ;;
    force-reload)
        force_reload
        ;;
    force-stop)
	rh_status_q || {
            echo "$prog is already stopped."
            exit 0
        }
        force_stop && {
            echo "$prog was killed."
            exit 0
        }
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|flush|debug|condrestart|try-restart|reload|force-reload|force-stop}"
        exit 2
esac
exit $?
